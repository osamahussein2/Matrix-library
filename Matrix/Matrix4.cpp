#include "Matrix4.h"

Matrix4::Matrix4(float a_, float b_, float c_, float d_, float e_, float f_, float g_, float h_, float i_, float j_, float k_,
	float l_, float m_, float n_, float o_, float p_) : determinant(0.0f)
{

	a[0][0] = a_;
	a[0][1] = b_;
	a[0][2] = c_;
	a[0][3] = d_;

	a[1][0] = e_;
	a[1][1] = f_;
	a[1][2] = g_;
	a[1][3] = h_;

	a[2][0] = i_;
	a[2][1] = j_;
	a[2][2] = k_;
	a[2][3] = l_;

	a[3][0] = m_;
	a[3][1] = n_;
	a[3][2] = o_;
	a[3][3] = p_;
}

Matrix4::~Matrix4()
{

}

float Matrix4::Determinant()
{
	// Determinant |A| = a(ei - fh) - b(di - fg) + c(dh - eg)

	determinant = a[0][0] * (a[1][1] * a[2][2] * a[3][3] + a[1][2] * a[2][3] * a[3][1] + a[1][3] * a[2][1] * a[3][2]
		- a[1][3] * a[2][2] * a[3][1] - a[1][2] * a[2][1] * a[3][3] - a[1][1] * a[2][3] * a[3][2])
		- a[1][0] * (a[0][1] * a[2][2] * a[3][3] + a[0][2] * a[2][3] * a[3][1] + a[0][3] * a[2][1] * a[3][2]
			- a[0][3] * a[2][2] * a[3][1] - a[0][2] * a[2][1] * a[3][3] - a[0][1] * a[2][3] * a[3][2])
		+ a[2][0] * (a[0][1] * a[1][2] * a[3][3] + a[0][2] * a[1][3] * a[3][1] + a[0][3] * a[1][1] * a[3][2]
			- a[0][3] * a[1][2] * a[3][1] - a[0][2] * a[1][1] * a[3][3] - a[0][1] * a[1][3] * a[3][2])
		- a[3][0] * (a[0][1] * a[1][2] * a[2][3] + a[0][2] * a[1][3] * a[2][1] + a[0][3] * a[1][1] * a[2][2]
			- a[0][3] * a[1][2] * a[2][1] - a[0][2] * a[1][1] * a[2][3] - a[0][1] * a[1][3] * a[2][2]);

	return determinant;
}

void Matrix4::Transpose(Matrix4 mat_)
{
	transpose[0][0] = mat_.a[0][0];
	transpose[0][1] = mat_.a[1][0];
	transpose[0][2] = mat_.a[2][0];
	transpose[0][3] = mat_.a[3][0];

	transpose[1][0] = mat_.a[0][1];
	transpose[1][1] = mat_.a[1][1];
	transpose[1][2] = mat_.a[2][1];
	transpose[1][3] = mat_.a[3][1];

	transpose[2][0] = mat_.a[0][2];
	transpose[2][1] = mat_.a[1][2];
	transpose[2][2] = mat_.a[2][2];
	transpose[2][3] = mat_.a[3][2];

	transpose[3][0] = mat_.a[0][3];
	transpose[3][1] = mat_.a[1][3];
	transpose[3][2] = mat_.a[2][3];
	transpose[3][3] = mat_.a[3][3];
}

void Matrix4::AdjugateMatrix()
{
	adjugate[0][0] = (a[1][1]  * a[2][2] * a[3][3]) + (a[1][2] * a[2][3] * a[3][1]) + (a[1][3] * a[2][1] * a[3][2])
		- (a[1][3] * a[2][2] * a[3][1]) - (a[1][2] * a[2][1] * a[3][3]) - (a[1][1] * a[2][3] * a[3][2]);

	adjugate[0][1] = -(a[0][1] * a[2][2] * a[3][3]) + (a[0][2] * a[2][3] * a[3][1]) + (a[0][3] * a[2][1] * a[3][2])
		- (a[0][3] * a[2][2] * a[3][1]) - (a[0][2] * a[2][1] * a[3][3]) - (a[0][1] * a[2][3] * a[3][2]);

	adjugate[0][2] = (a[0][1] * a[1][2] * a[3][3]) + (a[0][2] * a[1][3] * a[3][1]) + (a[0][3] * a[1][1] * a[3][2])
		- (a[0][3] * a[1][2] * a[3][1]) - (a[0][2] * a[1][1] * a[3][3]) - (a[0][1] * a[1][3] * a[3][2]);
	
	adjugate[0][3] = -(a[0][1] * a[1][2] * a[2][3]) + (a[0][2] * a[1][3] * a[2][1]) + (a[0][3] * a[1][1] * a[2][2])
		- (a[0][3] * a[1][2] * a[2][1]) - (a[0][2] * a[1][1] * a[2][3]) - (a[0][1] * a[1][3] * a[2][2]);

	adjugate[1][0] = -(a[1][0] * a[2][2] * a[3][3]) - (a[1][2] * a[2][3] * a[3][0]) - (a[1][3] * a[2][0] * a[3][2])
		+ (a[1][3] * a[2][2] * a[3][0]) + (a[1][2] * a[2][0] * a[3][3]) + (a[1][0] * a[2][3] * a[3][2]);

	adjugate[1][1] = (a[0][0] * a[2][2] * a[3][3]) - (a[0][2] * a[2][3] * a[3][0]) - (a[0][3] * a[2][0] * a[3][2])
		+ (a[0][3] * a[2][2] * a[3][0]) + (a[0][2] * a[2][0] * a[3][3]) + (a[0][0] * a[2][3] * a[3][2]);

	adjugate[1][2] = -(a[0][0] * a[1][2] * a[3][3]) - (a[0][2] * a[1][3] * a[3][0]) - (a[0][3] * a[1][0] * a[3][2])
		+ (a[0][3] * a[1][2] * a[3][0]) + (a[0][2] * a[1][0] * a[3][3]) + (a[0][0] * a[1][3] * a[3][2]);

	adjugate[1][3] = (a[0][0] * a[1][2] * a[2][3]) - (a[0][2] * a[1][3] * a[2][0]) - (a[0][3] * a[1][0] * a[2][2])
		+ (a[0][3] * a[1][2] * a[2][0]) + (a[0][2] * a[1][0] * a[2][3]) + (a[0][0] * a[1][3] * a[2][2]);

	adjugate[2][0] = (a[1][0] * a[2][1] * a[3][3]) + (a[1][1] * a[2][3] * a[3][1]) + (a[1][3] * a[2][0] * a[3][2])
		- (a[1][3] * a[2][1] * a[3][1]) - (a[1][1] * a[2][0] * a[3][3]) - (a[1][0] * a[2][3] * a[3][2]);

	adjugate[2][1] = -(a[0][0] * a[2][1] * a[3][3]) + (a[0][1] * a[2][3] * a[3][1]) + (a[0][3] * a[2][0] * a[3][2])
		- (a[0][3] * a[2][1] * a[3][1]) - (a[0][1] * a[2][0] * a[3][3]) - (a[0][0] * a[2][3] * a[3][2]);

	adjugate[2][2] = (a[0][0] * a[1][1] * a[3][3]) + (a[0][1] * a[1][3] * a[3][1]) + (a[0][3] * a[1][0] * a[3][2])
		- (a[0][3] * a[1][1] * a[3][1]) - (a[0][1] * a[1][0] * a[3][3]) - (a[0][0] * a[1][3] * a[3][2]);

	adjugate[2][3] = -(a[0][0] * a[1][1] * a[2][3]) + (a[0][1] * a[1][3] * a[2][1]) + (a[0][3] * a[1][0] * a[2][2])
		- (a[0][3] * a[1][1] * a[2][1]) - (a[0][1] * a[1][0] * a[2][3]) - (a[0][0] * a[1][3] * a[2][2]);

	adjugate[3][0] = -(a[1][0] * a[2][1] * a[3][2]) + (a[1][1] * a[2][2] * a[3][0]) + (a[1][2] * a[2][0] * a[3][1])
		- (a[1][2] * a[2][1] * a[3][0]) - (a[1][1] * a[2][0] * a[3][2]) - (a[1][0] * a[2][2] * a[3][1]);

	adjugate[3][1] = (a[0][0] * a[2][1] * a[3][2]) + (a[0][1] * a[2][2] * a[3][0]) + (a[0][2] * a[2][0] * a[3][1])
		- (a[0][2] * a[2][1] * a[3][0]) - (a[0][1] * a[2][0] * a[3][2]) - (a[0][0] * a[2][2] * a[3][1]);

	adjugate[3][2] = -(a[0][0] * a[1][1] * a[3][2]) + (a[0][1] * a[1][2] * a[3][0]) + (a[0][2] * a[1][0] * a[3][1])
		- (a[0][2] * a[1][1] * a[3][0]) - (a[0][1] * a[1][0] * a[3][2]) - (a[0][0] * a[1][2] * a[3][1]);

	adjugate[3][3] = (a[0][0] * a[1][1] * a[2][2]) + (a[0][1] * a[1][2] * a[2][0]) + (a[0][2] * a[1][0] * a[2][1])
		- (a[0][2] * a[1][1] * a[2][0]) - (a[0][1] * a[1][0] * a[2][2]) - (a[0][0] * a[1][2] * a[2][1]);
}

void Matrix4::Inverse()
{
	inverse[0][0] = (1 / determinant) * adjugate[0][0];
	inverse[0][1] = (1 / determinant) * adjugate[0][1];
	inverse[0][2] = (1 / determinant) * adjugate[0][2];
	inverse[0][3] = (1 / determinant) * adjugate[0][3];

	inverse[1][0] = (1 / determinant) * adjugate[1][0];
	inverse[1][1] = (1 / determinant) * adjugate[1][1];
	inverse[1][2] = (1 / determinant) * adjugate[1][2];

	inverse[2][0] = (1 / determinant) * adjugate[2][0];
	inverse[2][1] = (1 / determinant) * adjugate[2][1];
	inverse[2][2] = (1 / determinant) * adjugate[2][2];
}

void Matrix4::AddMatrices(Matrix4 mat_)
{
	add[0][0] = a[0][0] + mat_.a[0][0];
	add[0][1] = a[0][1] + mat_.a[0][1];
	add[0][2] = a[0][2] + mat_.a[0][2];
	add[0][3] = a[0][3] + mat_.a[0][3];

	add[1][0] = a[1][0] + mat_.a[1][0];
	add[1][1] = a[1][1] + mat_.a[1][1];
	add[1][2] = a[1][2] + mat_.a[1][2];
	add[1][3] = a[1][3] + mat_.a[1][3];

	add[2][0] = a[2][0] + mat_.a[2][0];
	add[2][1] = a[2][1] + mat_.a[2][1];
	add[2][2] = a[2][2] + mat_.a[2][2];
	add[2][3] = a[2][3] + mat_.a[2][3];

	add[3][0] = a[3][0] + mat_.a[3][0];
	add[3][1] = a[3][1] + mat_.a[3][1];
	add[3][2] = a[3][2] + mat_.a[3][2];
	add[3][3] = a[3][3] + mat_.a[3][3];
}

void Matrix4::SubtractMatrices(Matrix4 mat_)
{
	subtract[0][0] = a[0][0] - mat_.a[0][0];
	subtract[0][1] = a[0][1] - mat_.a[0][1];
	subtract[0][2] = a[0][2] - mat_.a[0][2];
	subtract[0][3] = a[0][3] - mat_.a[0][3];

	subtract[1][0] = a[1][0] - mat_.a[1][0];
	subtract[1][1] = a[1][1] - mat_.a[1][1];
	subtract[1][2] = a[1][2] - mat_.a[1][2];
	subtract[1][3] = a[1][3] - mat_.a[1][3];

	subtract[2][0] = a[2][0] - mat_.a[2][0];
	subtract[2][1] = a[2][1] - mat_.a[2][1];
	subtract[2][2] = a[2][2] - mat_.a[2][2];
	subtract[2][3] = a[2][3] - mat_.a[2][3];

	subtract[3][0] = a[3][0] - mat_.a[3][0];
	subtract[3][1] = a[3][1] - mat_.a[3][1];
	subtract[3][2] = a[3][2] - mat_.a[3][2];
	subtract[3][3] = a[3][3] - mat_.a[3][3];
}

void Matrix4::MultiplyMatrices(Matrix4 mat_)
{
	multiply[0][0] = a[0][0] * mat_.a[0][0];
	multiply[0][1] = a[0][1] * mat_.a[0][1];
	multiply[0][2] = a[0][2] * mat_.a[0][2];
	multiply[0][3] = a[0][3] * mat_.a[0][3];

	multiply[1][0] = a[1][0] * mat_.a[1][0];
	multiply[1][1] = a[1][1] * mat_.a[1][1];
	multiply[1][2] = a[1][2] * mat_.a[1][2];
	multiply[1][3] = a[1][3] * mat_.a[1][3];

	multiply[2][0] = a[2][0] * mat_.a[2][0];
	multiply[2][1] = a[2][1] * mat_.a[2][1];
	multiply[2][2] = a[2][2] * mat_.a[2][2];
	multiply[2][3] = a[2][3] * mat_.a[2][3];

	multiply[3][0] = a[3][0] * mat_.a[3][0];
	multiply[3][1] = a[3][1] * mat_.a[3][1];
	multiply[3][2] = a[3][2] * mat_.a[3][2];
	multiply[3][3] = a[3][3] * mat_.a[3][3];
}

void Matrix4::DivideMatrices(Matrix4 mat_)
{
	divide[0][0] = a[0][0] / mat_.a[0][0];
	divide[0][1] = a[0][1] / mat_.a[0][1];
	divide[0][2] = a[0][2] / mat_.a[0][2];
	divide[0][3] = a[0][3] / mat_.a[0][3];

	divide[1][0] = a[1][0] / mat_.a[1][0];
	divide[1][1] = a[1][1] / mat_.a[1][1];
	divide[1][2] = a[1][2] / mat_.a[1][2];
	divide[1][3] = a[1][3] / mat_.a[1][3];

	divide[2][0] = a[2][0] / mat_.a[2][0];
	divide[2][1] = a[2][1] / mat_.a[2][1];
	divide[2][2] = a[2][2] / mat_.a[2][2];
	divide[2][3] = a[2][3] / mat_.a[2][3];

	divide[3][0] = a[3][0] / mat_.a[3][0];
	divide[3][1] = a[3][1] / mat_.a[3][1];
	divide[3][2] = a[3][2] / mat_.a[3][2];
	divide[3][3] = a[3][3] / mat_.a[3][3];
}